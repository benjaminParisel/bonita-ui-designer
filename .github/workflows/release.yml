name: Create github Release
on:
  workflow_dispatch:
    inputs:
      version:
        description: new version to release (keep --next-path to bump version)
        default: --next-patch
        required: true
      publishBinaries:
        description: true to Publish binaries
        required: true
        default: 'true'
jobs:
  createGithubRelease:
    name: Create release
    runs-on: ubuntu-latest
    steps:
      - name: Setup checkout
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GH_UID_TOKEN }}
      - name: Get tag version
        id: newTagVersion
        shell: bash
        run: |
          if [ ${{ github.event.inputs.version }} = '--next-patch' ]
          then
              echo "##[set-output name=value;]$(echo $(./script/next-patch-version.sh))"
          else
              echo "##[set-output name=value;]$(echo ${{ github.event.inputs.version }})"
          fi
      - name: Config git
        run: |
          git config --local user.email "ui-designer-bot@users.noreply.github.com"
          git config --local user.name "ui-designer-bot"
          git config pull.rebase true
      - name: Update Version
        shell: bash
        run: |
          ./script/update-version.sh ${{ steps.newTagVersion.outputs.value }}
          git commit -a -m "other(${{ steps.newTagVersion.outputs.valuen }}) prepare release ${{ steps.newTagVersion.outputs.value }}" && git tag -a ${{ steps.newTagVersion.outputs.value}} -m "Release ${{ steps.newTagVersion.outputs.value }}"
          git push --tags
      - name: changelog
        uses: scottbrenner/generate-changelog-action@master
        id: Changelog
        env:
          REPO: ${{ github.repository }}
      - name: Create Release
        uses: actions/create-release@latest
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ steps.newTagVersion.outputs.value }}
          release_name: Release ${{ steps.newTagVersion.outputs.value }}
          body: |
            ${{ steps.Changelog.outputs.changelog }}
          draft: false
          prerelease: true
      - name: Publish artefact
        if: ${{ success() && github.event.inputs.publishBinaries == 'true'}}
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.GH_UID_TOKEN }}
          event-type: github-publish
          client-payload: '{"studioBaseBranch":"${{ github.ref }}", "releaseVersion": "${{ steps.newTagVersion.outputs.value }}"}'
      - uses: act10ns/slack@v1
        if: ${{ failure() }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.INCOMING_WEBHOOK }}
        with:
          status: ${{ job.status }}


#name: UI-Designer Release
#
#on:
#  workflow_dispatch:
#    inputs:
#      version:
#        description: Bump Version - keep --next-patch to bump patch digit
#        default: '--next-patch'
#        required: true
#      pushGithubRelease:
#        description: true to push a github release
#        required: true
#        default: 'true'
#      publishBinaries:
#        description: true to Publish binaries
#        required: true
#        default: 'true'
#jobs:
#  release:
#    runs-on: ubuntu-latest
#    outputs:
#      releaseVersion: ${{ steps.newTagVersion.outputs.value }}
#    strategy:
#      max-parallel: 1
#    steps:
#      - name: Setup checkout
#        uses: actions/checkout@v2
#        with:
#          token: ${{ secrets.GH_UID_TOKEN }}
#      - name: Get tag version
#        id: newTagVersion
#        shell: bash
#        run: |
#          if [ ${{ github.event.inputs.version }} = '--next-patch' ]
#          then
#              echo "##[set-output name=value;]$(echo $(./script/next-patch-version.sh))"
#          else
#              echo "##[set-output name=value;]$(echo ${{ github.event.inputs.version }})"
#          fi
#      - name: Repository Dispatch - create github release
#        if: ${{ success() }}
#        uses: peter-evans/repository-dispatch@v1
#        with:
#          token: ${{ secrets.GH_UID_TOKEN }}
#          event-type: github-release
#          client-payload: '{"baseBranch":"${{ github.ref }}", "releaseVersion": "${{ steps.newTagVersion.outputs.value }}", "publishBinaries": "${{ github.event.inputs.publishBinaries }}"}'
#      - name: Repository Dispatch - publish artefact
#        if: ${{ success() }}
#        uses: peter-evans/repository-dispatch@v1
#        with:
#          token: ${{ secrets.GH_UID_TOKEN }}
#          event-type: github-publish
#          client-payload: '{"baseBranch":"${{ github.ref }}", "releaseVersion": "${{ steps.newTagVersion.outputs.value }}"}'
##  createRelease:
##    runs-on: ubuntu-latest
##    needs: getReleaseVersion
##    steps:
##     - name: Setup checkout
##       uses: actions/checkout@v2
##       with:
##        token: ${{ secrets.GH_UID_TOKEN }}
##     - name: Repository Dispatch - create github release
##       uses: peter-evans/repository-dispatch@v1
##       with:
##         token: ${{ secrets.GH_UID_TOKEN }}
##         event-type: github-release
##         client-payload: '{"releaseVersion": "${{ needs.getReleaseVersion.outputs.releaseVersion }}", "publishBinaries": "${{ github.event.inputs.publishBinaries }}"}'
##     - name: create github release
##       uses: benc-uk/workflow-dispatch@v1.1
##       with:
##         workflow: Create github Release
##         token: ${{ secrets.GH_UID_TOKEN }}
##         inputs: '{ "version": "${{ needs.getReleaseVersion.outputs.releaseVersion }}" }'
##         ref: ${{github.ref}}
##       if: ${{ github.event.inputs.pushGithubRelease == 'true' }}
##  publishBinaries:
##     runs-on: ubuntu-latest
##     needs: [getReleaseVersion,createRelease]
##     steps:
##     - name: Publish Binaries
##       uses: benc-uk/workflow-dispatch@v1.1
##       with:
##         workflow: Publish binaries
##         token: ${{ secrets.GH_UID_TOKEN }}
##         inputs: '{ "tagVersion": "${{ needs.getReleaseVersion.outputs.releaseVersion }}" }'
##         ref: ${{github.ref}}
##       if: ${{ github.event.inputs.publishBinaries == 'true' }}
#
#
